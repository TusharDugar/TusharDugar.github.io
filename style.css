/* style.css */

/* Basic Reset & Font */
:root {
    /* Sawad-inspired Color Palette */
    --bg-main: #000000; /* Solid black background from Sawad */
    --bg-section-card: #141414; /* Background for cards/sections (if added back) */
    --bg-profile-card: #FFFFFF; /* White background for the About Me card */
    --text-light: #F0F0F0; /* Light text for readability */
    --text-medium: #A0A0A0; /* Slightly darker light for secondary text */
    --text-dark-card: #000000; /* Black text for white card background */
    --text-medium-card: #4B4B4B; /* Dark gray for secondary text on white card */
    
    /* Accent Colors from Sawad */
    --accent-primary-sawad: #FF6B00; /* Main orange from Sawad */
    --accent-secondary-sawad: #00FFC2; /* Green accent from Sawad */
    
    /* Gradients */
    --gradient-hero-text: linear-gradient(90deg, #F0F0F0 0%, #A0A0A0 100%); /* Light gradient for hero text (for stats if added back) */
    --gradient-skills-front: linear-gradient(214.02deg, #EA5F5F 6.04%, #EEAA55 92.95%); /* Your specified orange gradient for skill cards (if added back) */

    --primary-heading-color: var(--text-light);
    --shadow-color-dark: rgba(0, 0, 0, 0.8); /* Darker shadow for depth */
    --shadow-color-subtle: rgba(0, 0, 0, 0.4); /* Subtle shadow for blending */
    --shadow-color-card-white: rgba(0,0,0,0.25); /* Specific shadow for white card */

    /* New colors for Tool Cards */
    --bg-tool-card: #1A1A1A; /* Dark background for tool cards */
    --tool-icon-bg: #F8F8F8; /* Adjusted to a slightly off-white for tool icons, closer to Sawad */
    --tool-name-color: var(--text-light); /* White for tool names */
    --tool-category-color: var(--text-medium); /* Gray for categories */

    /* New color for grey headings (re-introduced) */
    --text-sub-heading-grey: #666666; /* Distinct grey color for headings */
}

/* Universal Box-Sizing for easier layout management */
*, *::before, *::after {
  box-sizing: border-box;
}

body {
    margin: 0;
    font-family: 'Poppins', sans-serif;
    line-height: 1.6;
    color: var(--text-light);
    background-color: var(--bg-main); /* Base black background color */
    overflow-x: hidden;
    position: relative;
    scroll-behavior: smooth;
    min-height: 100vh;
}

/* New: Repeating Image Background Container */
.site-background-image {
    position: fixed;
    inset: 0; /* Shorthand for top:0; right:0; bottom:0; left:0; */
    z-index: -2; /* Above body's background-color, but below other overlays */
    pointer-events: none;
    opacity: 0.079; /* Adjusted opacity to 7.9% */
    background-image: url('./71976 (1).jpg'); /* Your specified image, explicit current directory */
    background-repeat: repeat; /* To stack */
    background-size: 400px auto; /* A tile size that creates visible repetition (roughly 4-5 times horizontally) */
}

/* NEW: Animated Color Gradient Overlay */
.background-color-gradient {
    position: fixed;
    inset: 0;
    z-index: -2; /* Above .site-background-image, below color glows */
    pointer-events: none;
    opacity: 0.05; /* Adjusted opacity to 5% */
    background-image: linear-gradient(-45deg,#ee7752,#e73c7e,#23a6d5,#23d5ab,#9600FF,#aebaf8,#bb73e0,#c1fcd3); /* New gradient */
    background-size: 400% 400%;
    animation: gradient 15s ease infinite; /* New animation */
}

/* Keyframes for the new animated colorful gradient */
@keyframes gradient {
  0%, 100% { background-position: 0% 50%; }
  50% { background-position: 100% 50%; }
}


/* Subtle Background Glowing Elements (Mimicking Sawad's subtle ambient light) */
/* These are the fixed, large, subtle color glows */
body::before, body::after {
    content: '';
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    border-radius: 50%;
    filter: blur(400px); /* FURTHER INCREASED BLUR */
    opacity: 0.03; /* FURTHER DECREASED OPACITY */
    z-index: -1; /* Above .background-color-gradient, below html::before (grid) */
    pointer-events: none;
    will-change: transform, opacity;
}

body::before {
    width: 1300px; /* Larger */
    height: 1300px; /* Larger */
    background: radial-gradient(circle at center, var(--accent-primary-sawad) 0%, transparent 60%);
    animation: glow1 25s infinite alternate ease-in-out;
}

body::after {
    width: 1200px; /* Larger */
    height: 1200px; /* Larger */
    background: radial-gradient(circle at center, var(--accent-secondary-sawad) 0%, transparent 60%);
    animation: glow2 28s infinite alternate-reverse ease-in-out;
}

@keyframes glow1 {
    0% { transform: translate(-50%, -50%) scale(1); opacity: 0.03; }
    50% { transform: translate(-55%, -45%) scale(1.05); opacity: 0.05; } /* Adjusted max opacity */
    100% { transform: translate(-45%, -55%) scale(1); opacity: 0.03; }
}

@keyframes glow2 {
    0% { transform: translate(-50%, -50%) scale(1); opacity: 0.03; }
    50% { transform: translate(-45%, -55%) scale(1.03); opacity: 0.05; } /* Adjusted max opacity */
    100% { transform: translate(-55%, -45%) scale(1); opacity: 0.03; }
}


/* Animated Background Grid Pattern (now only the mask, gradient moved to new div) */
html::before {
    content: '';
    position: fixed;
    inset: 0;
    z-index: 0; /* Above color glows, below main content */
    pointer-events: none;
    opacity: 0.02; /* UPDATED: Increased opacity for better visibility */
    
    /* TWEAKED LINE THICKNESS & SEGMENTATION */
    mask-image:
        linear-gradient(to right, transparent 99.85%, white 0.15%), /* Even thinner vertical lines */
        linear-gradient(to bottom, transparent 99.85%, white 0.15%), /* Even thinner horizontal lines */
        linear-gradient(45deg, transparent 75%, white 75.02%, white 75.18%, transparent 75.2%), /* Extremely thin diagonal grid 1 */
        linear-gradient(-45deg, transparent 75%, white 75.02%, white 75.18%, transparent 75.2%); /* Extremely thin diagonal grid 2 */

    -webkit-mask-image:
        linear-gradient(to right, transparent 99.85%, white 0.15%),
        linear-gradient(to bottom, transparent 99.85%, white 0.15%),
        linear-gradient(45deg, transparent 75%, white 75.02%, white 75.18%, transparent 75.2%),
        linear-gradient(-45deg, transparent 75%, white 75.02%, white 75.18%, transparent 75.2%);

    /* ADJUSTED MASK SIZES for even denser pattern */
    mask-size: 40px 40px, 40px 40px, 40px 40px, 40px 40px; /* Adjusted from 50px */
    -webkit-mask-size: 40px 40px, 40px 40px, 40px 40px, 40px 40px;

    mask-repeat: repeat;
    -webkit-mask-repeat: repeat;
}

/* Mouse Follower Glow Element (new implementation for mouse tracking) */
.mouse-follower-glow {
    position: fixed;
    top: 0; /* Will be dynamically set by JS */
    left: 0; /* Will be dynamically set by JS */
    width: 80px; /* Size of the glow */
    height: 80px; /* Size of the glow */
    border-radius: 50%;
    background: radial-gradient(circle at center, rgba(255, 107, 0, 0.15) 0%, transparent 60%); /* Subtle orange glow */
    filter: blur(50px); /* Soft blur */
    z-index: 100; /* Ensure it's above all content */
    pointer-events: none; /* Crucial so it doesn't block clicks/interactions */
    /* Add a small transition for smoothness when mouse moves */
    transition: transform 0.1s ease-out; /* Smooth transition for position updates */
    will-change: transform; /* Performance hint */
}


/* Global Section Styling */
.section {
  max-width: 1200px;
  margin: 0 auto;
  position: relative;
  z-index: 1;
  padding: 80px 40px; /* Reduced from 200px for tighter spacing */
}

/* Reveal Animation Base */
.reveal-item {
    opacity: 0;
    transform: translateY(40px);
    transition: opacity 0.8s cubic-bezier(0.22, 1, 0.36, 1), transform 0.8s cubic-bezier(0.22, 1, 0.36, 1);
    will-change: transform, opacity;
}
.reveal-item.visible {
    opacity: 1;
    transform: translateY(0);
}

/* Stagger Parent (for elements like About section) */
.reveal-parent {
    position: relative;
}

/* Stagger Child (for elements inside About section) */
.reveal-child {
    opacity: 0;
    transform: translateY(20px); /* Reduced from 60px to prevent clipping by overflow:hidden parents */
    transition: opacity 0.8s cubic-bezier(0.22, 1, 0.36, 1), transform 0.8s cubic-bezier(0.22, 1, 0.36, 1);
    will-change: transform, opacity;
}
.reveal-child.visible {
    opacity: 1;
    transform: translateY(0);
}

/* Stagger Container (for elements like Tools/Contact) */
.reveal-stagger-container {
    position: relative;
}

/* Stagger Item (for elements inside Tools/Contact containers) */
.reveal-stagger {
    opacity: 0;
    transform: translateY(60px);
    transition: opacity 0.8s cubic-bezier(0.22, 1, 0.36, 1), transform 0.8s cubic-bezier(0.22, 1, 0.36, 1);
    will-change: transform, opacity;
}
.reveal-stagger.visible {
    opacity: 1;
    transform: translateY(0);
}


/* Main Layout Container */
.main-layout-container {
    display: flex;
    justify-content: center; /* Center the entire two-column layout */
    max-width: 1920px; /* Overall max width of the site */
    margin: 0 auto; /* Center the main layout container itself */
    padding: 0 60px; /* Overall padding for the site */
    min-height: 100vh;
    position: relative;
    z-index: 1;
    padding-top: 20px;
    gap: 60px; /* Gap between left and right columns */
}

/* Left Column Sticky Styling */
.left-column-sticky {
    flex-shrink: 0;
    flex-basis: 370px; /* Fixed width for the left column */
    box-sizing: border-box;
    display: flex;
    flex-direction: column;
    align-items: center; /* Centers content horizontally within the column */
    justify-content: center; /* Centers content vertically within the column's height */
    text-align: center;
    z-index: 2;
    
    /* Default (Mobile/Tablet) positioning */
    position: relative;
    top: auto;
    transform: none; /* No vertical translate by default */
    margin: 50px auto 0 auto; /* Horizontally center as a block, push down a bit */
    height: auto; /* Content dictates height */
    padding-right: 0; /* Remove unnecessary padding */
}

/* Desktop-specific rules for left column (fixed and centrally aligned within its allocated space) */
@media (min-width: 1024px) {
    .main-layout-container {
        align-items: flex-start; /* Align to top to allow sticky to work properly */
    }
    .left-column-sticky {
        position: sticky; /* Make it sticky */
        top: 50%; /* Start sticky behavior from the middle of the viewport */
        transform: translateY(-50%); /* Adjust upwards by half its height for true vertical centering */
        height: calc(100vh - 100px); /* Give it a defined height so justify-content: center has room to work */
        margin: 0; /* Remove auto margins */
        align-self: flex-start; /* It needs to be flex-start in the parent for sticky to work correctly with top property */
    }
}


/* About Left Content (White Card) */
.about-left-content {
    background-color: var(--bg-profile-card);
    color: var(--text-dark-card);
    border-radius: 20px;
    padding: 30px 25px;
    box-shadow: 0 10px 30px var(--shadow-color-card-white);
    width: 100%;
    max-width: 370px;
    height: auto;
    box-sizing: border-box;

    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
    position: relative;
    overflow: hidden;
}

/* Profile Image Container */
.profile-image-container {
    width: calc(100% + 50px);
    max-width: 420px;
    height: 200px;
    border-radius: 15px;
    overflow: hidden;
    margin-bottom: 25px;
    position: relative;
    transform: translateX(0);
    background-color: var(--accent-primary-sawad);
}
.profile-image-container .profile-photo {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center top;
    filter: brightness(0.01);
}

/* Main Name */
.about-left-content h3 {
    font-family: 'Poppins', sans-serif;
    font-size: 2.8em;
    font-weight: 700;
    color: var(--text-dark-card);
    margin-bottom: 20px;
    line-height: 1.1;
}

/* Fire Icon with connecting dashed lines */
.fire-icon-with-line {
    position: relative;
    width: 100%;
    height: 40px;
    display: flex;
    justify-content: center;
    align-items: center;
    margin-bottom: 25px;
}

.fire-icon {
    background-color: var(--accent-primary-sawad);
    border-radius: 50%;
    padding: 8px;
    font-size: 1.1em;
    color: var(--text-light);
    box-shadow: 0 2px 8px rgba(0,0,0,0.5);
    z-index: 2;
    position: relative;
}

.fire-icon-with-line::before,
.fire-icon-with-line::after {
    content: '';
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    height: 2px;
    border-top: 2px dashed var(--accent-primary-sawad);
    z-index: 1;
}

.fire-icon-with-line::before {
    left: 0;
    width: calc(50% - 25px);
}

.fire-icon-with-line::after {
    right: 0;
    width: calc(50% - 25px);
}

/* Decorative background dashed lines */
.dashed-decoration {
    position: absolute;
    border: 2px dashed var(--accent-primary-sawad); /* Color set to orange */
    border-radius: 50%;
    box-sizing: border-box;
    pointer-events: none;
    z-index: 0;
}

.top-left-curve {
    width: 150px;
    height: 150px;
    top: -50px;
    left: -50px;
    /* FIXED: Flipped to show right and bottom borders, making it curve inwards */
    border-top-color: transparent; 
    border-left-color: transparent;
    transform: rotate(-10deg);
}

.bottom-right-curve {
    width: 150px;
    height: 150px;
    bottom: -50px;
    right: -50px;
    /* FIXED: Flipped to show top and left borders, making it curve inwards */
    border-bottom-color: transparent;
    border-right-color: transparent;
    transform: rotate(10deg);
}

/* Short Description */
.about-short-desc {
    text-align: center; /* Centrally aligned */
    line-height: 1.8; /* Better line spacing */
    word-spacing: 1px; /* Better word spacing */
    font-size: 0.9em;
    color: var(--text-medium-card);
    margin-bottom: 25px;
    padding: 0 5px;
    max-width: 90%;
}

/* Social Icons */
.about-social-icons {
    display: flex;
    justify-content: center;
    gap: 15px;
    margin-top: auto;
    padding-top: 10px;
}
.about-social-icons a {
    color: var(--accent-primary-sawad);
    font-size: 1.5em;
    transition: color 0.3s cubic-bezier(0.22, 1, 0.36, 1), transform 0.3s cubic-bezier(0.22, 1, 0.36, 1);
}
.about-social-icons a:hover {
    color: var(--accent-primary-sawad);
    transform: translateY(-2px) scale(1.05);
}


/* Right Column (Scrolling) */
.right-column-scroll {
    flex-grow: 1;
    padding-bottom: 100px;
    box-sizing: border-box;
    min-height: 150vh;
    padding-top: 50px;
    text-align: left;
    position: relative;
    z-index: 0;
}

/* Specific text alignment for elements within right-column-scroll */
.right-column-scroll h1,
.right-column-scroll h2,
.right-column-scroll p {
  margin-left: 0;
  margin-right: 0;
}

/* HERO TEXT ADJUSTMENTS */
.hero-heading {
    font-family: 'Poppins', sans-serif;
    font-size: 7.75em; /* UPDATED: Changed to 7.75em */
    line-height: 0.75em;
    font-weight: 900;
    margin-bottom: 20px;
    text-transform: uppercase;
    text-align: left;
    margin-left: 0;
    background: none;
    -webkit-background-clip: unset;
    background-clip: unset;
    -webkit-text-fill-color: unset;
    color: unset;
}
.hero-heading .crafting {
  color: #ffffff;
}

.hero-heading .digital {
  color: var(--text-sub-heading-grey); /* Applied specific sub-heading grey color */
}

/* HERO DESCRIPTION ADJUSTMENTS */
.hero-description {
    text-align: justify; /* Justify text */
    line-height: 1.8; /* Better line spacing */
    word-spacing: 1px; /* Better word spacing */
    font-size: 1em;
    margin-bottom: 40px; /* Adjust hero text spacing */
    max-width: 90%; /* Adjust hero text spacing */
    color: var(--text-medium);
}


/* Services Section Wrapper (for pinning) */
#services-pin-wrapper {
    height: 1600vh; /* As specified in prompt */
    position: relative;
    width: 100%;
}

/* Services Section Styles (Two-Column Layout & Manual Pinning) */
.services-section {
    position: sticky; /* As specified in prompt */
    top: 0; /* As specified in prompt */
    height: 100vh; /* As specified in prompt */
    display: flex; /* As specified in prompt */
    align-items: center; /* As specified in prompt */
    justify-content: space-between; /* As specified in prompt */
    max-width: 1200px; /* Constrain max-width for content */
    margin: 0 auto; /* Center horizontally */
    z-index: 2; /* Ensure it stays above background */
    background-color: transparent; /* Keep background transparent */
    padding: 100px 20px; /* Example padding */
    box-sizing: border-box;
    gap: 80px; /* Gap between columns */
    overflow: hidden; /* Prevent content overflow within section */
}

/* Class added by JS when the section is manually pinned */
.services-section.is-pinned {
    position: fixed; /* Re-activated fixed positioning */
    top: 0;
    left: 50%;
    width: 100%;
    max-width: 1200px; /* Constrain max-width when fixed, keeps content centered */
    transform: translateX(-50%); /* Center horizontally */
    z-index: 10; /* Ensure it stays above other scrolling content */
    padding: 0 60px; /* Match main-layout-container padding when fixed */
    display: flex; /* UPDATED: Restore flex context in fixed state */
    gap: 80px; /* UPDATED: Restore gap in fixed state */
    align-items: center; /* UPDATED: Restore alignment in fixed state */
    justify-content: space-between; /* UPDATED: Restore justification in fixed state */
    background-color: transparent; /* UPDATED: Restore background in fixed state */
    overflow: hidden; /* UPDATED: Restore overflow in fixed state */
}


/* Left Column of Services Section */
.services-left-column {
    position: relative; /* Added position: relative for z-index */
    z-index: 2; /* Added z-index to bring it above the cube */
    flex-basis: 45%; /* Adjust width for left column */
    max-width: 500px;
    display: flex; /* As specified in prompt */
    flex-direction: column;
    justify-content: center; /* Vertically center content within its column, as specified */
    align-items: flex-start; /* Align text to the start */
    text-align: left; /* Align text to the left */
    height: 100%; /* Take full height to allow internal centering */
    padding-right: 20px; /* Space between columns */
    box-sizing: border-box;
    flex-shrink: 1; /* Allow column to shrink if needed */
}

/* Right Column of Services Section */
.services-right-column {
    overflow: hidden; /* Added overflow: hidden to contain the cube */
    flex-basis: 50%; /* Adjust width for right column */
    max-width: 500px;
    display: flex; /* As specified in prompt */
    justify-content: center; /* Horizontally center cube within its column, as specified */
    align-items: center; /* Vertically center cube within its column, as specified */
    height: 100%; /* Take full height of parent flex container */
    box-sizing: border-box;
    flex-shrink: 1; /* Allow column to shrink if needed */
    min-width: 0; /* Allow flexbox to shrink it correctly */
}


/* Services Main Title */
.services-heading {
    font-family: 'Poppins', sans-serif; /* Assumed font-family */
    font-size: clamp(2.5rem, 8vw, 8rem); /* As specified in prompt */
    line-height: 0.75em;
    font-weight: 800;
    margin-bottom: 20px;
    text-transform: uppercase;
    text-align: left;
    position: relative;
    z-index: 4;
    padding: 0;
    width: 100%;
}
.services-heading .text-white { color: var(--text-light); display: block; } /* For two-tone effect */
.services-heading .text-gray { color: var(--text-sub-heading-grey); display: block; } /* For two-tone effect */

/* Styling for the description in the left column */
.services-description {
    font-size: clamp(0.875rem, 1.2vw, 1rem); /* As specified in prompt */
    line-height: 1.4; /* As specified in prompt */
    color: var(--text-medium);
    text-align: left;
    max-width: 100%;
}


/* --- 3D Cube Animation Styles --- */
.cube-container {
    width: 100%; /* Take full width of parent right column */
    max-width: 500px; /* As specified in prompt */
    height: 300px; /* As specified in prompt */
    margin: 0 auto; /* Center horizontally within its flex parent */
    perspective: 1200px; /* As specified in prompt */
    position: sticky; /* As specified in prompt */
    top: 50%; /* As specified in prompt */
    transform: translateY(-50%); /* As specified in prompt */
    overflow: hidden; /* Important for clipping rotating elements */
    will-change: transform, opacity;
    border: none;
}

.cube {
    width: 100%;
    height: 100%;
    position: relative;
    transform-style: preserve-3d; /* As specified in prompt */
    transition: transform 1200ms cubic-bezier(0.645, 0.045, 0.355, 1); /* As specified in prompt */
    transform: rotateX(0deg); /* Initial state for dynamic rotateX flip */
    will-change: transform;
    overflow: hidden; /* Added overflow: hidden as safeguard */
}

.face {
    position: absolute;
    width: 100%;
    height: 100%; /* Each face must match container height, as specified */
    border: none;
    background-color: var(--bg-tool-card); /* Dark background */
    color: var(--text-light); /* Light text color */
    padding: 2rem; /* As specified in prompt */
    display: flex; /* As specified in prompt */
    flex-direction: column;
    justify-content: center; /* Vertically centers content block, as specified */
    align-items: flex-start; /* Align content to the left within face, as specified */
    backface-visibility: hidden; /* As specified in prompt */
    will-change: transform, opacity;
    box-sizing: border-box;
    text-align: left; /* Ensure text inside face respects alignment */
}

/* Styling for content within the face */
.service-content {
    width: 100%; /* Take full width of face padding */
    flex-grow: 1; /* Allow content to grow and push face-number to bottom */
    display: flex;
    flex-direction: column;
    justify-content: center; /* Center title/description vertically */
    align-items: flex-start; /* Align title/description horizontally */
    text-align: left;
}

.service-title {
    font-size: clamp(1rem, 1.5vw, 1.25rem); /* As specified in prompt */
    font-weight: 700;
    margin-bottom: 0.5rem; /* As specified in prompt */
    line-height: 1.2;
    color: #9CFF33; /* As specified in prompt */
}

.service-description {
    text-align: left; /* As specified in prompt */
    line-height: 1.4; /* As specified in prompt */
    word-spacing: 1px;
    font-size: clamp(0.875rem, 1.2vw, 1rem); /* As specified in prompt */
    color: var(--text-medium);
    max-width: 100%;
}

.face-number {
    position: absolute; /* As specified in prompt */
    bottom: 1rem; /* As specified in prompt */
    right: 1rem;  /* As specified in prompt */
    font-size: clamp(3rem, 10vw, 6rem); /* As specified in prompt */
    font-weight: 500;
    color: rgba(255, 255, 255, 0.08); /* As specified in prompt */
    pointer-events: none;
    z-index: 0;
    line-height: 1;
}

/* --- Responsive adjustments for the services section --- */
@media (min-width: 768px) { /* z-index rules apply from 768px and up */
    .services-left-column {
        z-index: 2; /* Ensure it stays above the cube-container */
    }
    .cube-container {
        z-index: 1; /* Lower z-index than left column */
    }
}

@media (max-width: 1200px) {
    .services-section.is-pinned {
        padding: 0 40px; /* Adjust fixed padding for medium screens */
    }
    .services-left-column {
        flex-basis: 40%;
    }
    .services-right-column {
        flex-basis: 55%;
    }
    .cube-container {
        max-width: 80%; /* Consistent responsive max-width */
        height: 100%; /* Height scales with parent */
        min-height: 300px; /* Ensure min-height */
    }
    .face {
        padding: 1.2rem;
    }
    .face-number {
        bottom: 0.8rem;
        right: 0.8rem;
    }
}

@media (max-width: 768px) {
    .services-section {
        flex-direction: column; /* Stack into a single column, as specified */
        height: auto; /* Allow height to adjust */
        min-height: 100vh; /* Ensure it still takes up space when not pinned */
        padding: 60px 20px; /* Adjust padding */
        gap: 40px; /* Smaller gap when stacked */
    }
    /* .is-pinned state should mimic the relative mobile layout when active */
    .services-section.is-pinned {
        flex-direction: column;
        top: auto; left: auto; transform: none; /* Override fixed positioning for mobile context */
        position: relative; /* Make it flow naturally */
        width: 100%;
        height: auto;
        max-width: 100%;
        padding: 60px 20px;
        margin: 0 auto;
        z-index: 1; /* Not aggressively on top in stacked layout */
    }
    .services-left-column {
        flex-basis: auto; /* Auto width */
        max-width: 100%;
        height: auto;
        padding-right: 0;
        margin-bottom: 0; /* Spacing handled by parent gap */
        align-items: center; /* Center text block horizontally */
        text-align: center;
    }
    .services-heading, .services-description {
        text-align: center;
    }
    .services-right-column {
        flex-basis: auto; /* Auto width */
        max-width: 100%;
        height: auto;
        justify-content: center;
        align-items: center;
    }
    .cube-container {
        position: relative; /* Remove sticky, as specified */
        top: auto;
        transform: none;
        max-width: 80%;
        height: 400px; /* As specified in prompt */
        margin: 0 auto;
        min-height: 300px; /* Ensure min-height */
    }
    .face {
        padding: 1rem;
        justify-content: center;
        align-items: center;
        text-align: center;
    }
    .service-content {
        justify-content: center;
        align-items: center;
        text-align: center;
    }
    .service-title, .service-description {
        text-align: center;
    }
    .face-number {
        bottom: 0.5rem;
        right: 0.5rem;
    }
}

@media (max-width: 480px) {
    .services-section {
        gap: 30px;
        padding: 40px 15px;
    }
    .cube-container {
        height: 300px; /* As specified in prompt */
        min-height: 200px; /* Ensure min-height */
    }
    .face {
        padding: 0.8rem;
    }
    .face-number {
        bottom: 0.2rem;
        right: 0.2rem;
    }
}

/* --- Accessibility: Reduced motion override --- */
@media (prefers-reduced-motion: reduce) {
    /* For other reveal animations */
    .reveal-item,
    .reveal-parent .reveal-child,
    .reveal-stagger-container .reveal-stagger,
    .tool-card {
        transition: none !important;
        transform: none !important;
        opacity: 1 !important;
        animation: none !important;
        visibility: visible !important;
    }
    
    /* Specific overrides for the services section in reduced motion */
    #services-pin-wrapper {
        height: auto !important; /* No extra scroll space needed */
        position: relative !important;
    }
    .services-section {
        position: relative !important; /* Revert to normal document flow */
        top: auto !important;
        left: auto !important;
        transform: none !important;
        height: auto !important;
        min-height: auto !important;
        padding: 80px 40px !important; /* Use default section padding */
        pointer-events: auto !important;
        flex-direction: column !important; /* Always stack */
        justify-content: flex-start !important;
        align-items: center !important;
        gap: 20px !important; /* Default stacked gap */
    }
    .services-left-column, .services-right-column {
        flex-basis: auto !important;
        max-width: 100% !important;
        height: auto !important;
        padding-right: 0 !important;
        margin-bottom: 20px !important; /* Space between stacked columns */
        justify-content: flex-start !important;
        align-items: center !important;
        text-align: center !important;
    }
    .services-heading, .services-description {
        text-align: center !important;
    }

    .cube-container {
        perspective: none !important; /* Flatten 3D */
        transform: none !important;
        height: auto !important; /* Auto height for stacked content */
        margin: 0 auto !important;
        position: relative !important;
        top: auto !important;
        overflow: visible !important; /* Allow content to dictate size */
        max-width: 100% !important;
        z-index: auto !important; /* Reset z-index */
    }
    .cube {
        transform-style: flat !important; /* Flatten 3D transforms */
        transform: none !important;
        transition: none !important;
        display: flex; /* Stack faces vertically */
        flex-direction: column;
        gap: 20px;
        height: auto;
    }
    .face {
        transition: none !important;
        opacity: 1 !important;
        visibility: visible !important;
        position: relative !important; /* Flow naturally */
        transform: none !important;
        height: auto !important;
        justify-content: flex-start !important;
        align-items: flex-start !important;
        text-align: left !important;
        padding: 1rem !important; /* Consistent padding */
    }
    .face .service-content {
        align-items: flex-start !important;
        text-align: left !important;
    }
    .face .service-description {
        text-align: left !important;
    }
    .face .face-number {
        position: relative !important; /* Flow naturally */
        bottom: auto !important;
        right: auto !important;
        font-size: 0.8em !important;
        color: var(--text-medium) !important;
        margin-top: 10px;
        align-self: flex-end !important;
    }
}

/* --- Reverted "Let's Connect" Section CSS --- */
footer#contact {
    background-color: var(--bg-section-card); /* Dark background */
    color: var(--text-light);
    padding: 100px 40px;
    text-align: center;
}

footer h2 { /* Original h2 style */
    font-family: 'Poppins', sans-serif;
    text-align: center;
    margin-bottom: 25px;
    font-size: 3.2em;
    color: var(--primary-heading-color);
    font-weight: 700;
    letter-spacing: 1.5px;
    text-shadow: 2px 2px 6px rgba(0,0,0,0.7); /* Restore text shadow */
}

.contact-tagline {
    font-size: 1.1rem; /* Specific font size */
    margin-bottom: 40px;
    color: var(--text-medium); /* Specific text color */
    max-width: 700px;
    margin-left: auto;
    margin-right: auto;
    line-height: 1.8;
    opacity: 0.95;
}

.contact-buttons {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 20px; /* Gap between buttons */
    margin-bottom: 40px;
}

.contact-button {
    background-color: var(--bg-profile-card); /* White background for buttons */
    color: var(--text-dark-card); /* Dark text for buttons */
    padding: 15px 25px; /* Specific padding */
    border: none;
    border-radius: 10px; /* Rounded corners */
    font-size: 1rem; /* Specific font size */
    display: flex; /* Flex container for icon/text */
    flex-direction: row; /* Icon and text side-by-side */
    align-items: center;
    justify-content: center; /* Center content horizontally */
    gap: 8px; /* Gap between icon and text */
    box-shadow: 0 5px 15px rgba(0,0,0,0.2);
    cursor: pointer;
    transition: all 0.3s ease;
    width: auto; /* Allow content to dictate width */
    height: auto; /* Allow content to dictate height */
    position: relative; /* For copied state */
    overflow: hidden; /* For copied state transition */
}

.contact-button:hover {
    transform: translateY(-2px); /* Subtle lift on hover */
    box-shadow: 0 8px 25px rgba(0,0,0,0.3);
}

.contact-button i { /* Icon styling */
    font-size: 1.5em; /* Smaller icon for compact button */
    color: var(--accent-primary-sawad); /* Orange accent */
}

.contact-button .button-value {
    font-size: 1em; /* Adjusted to fit better */
    font-weight: 600;
    color: var(--text-dark-card); /* Dark text */
    white-space: nowrap; /* Prevent wrapping */
    overflow: hidden;
    text-overflow: ellipsis;
    padding: 0;
    margin: 0;
    max-width: none;
}

.contact-button .copied-text {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    background: var(--accent-primary-sawad); /* Solid orange, not gradient */
    color: var(--text-light);
    font-size: 1.2em; /* Adjusted font size */
    font-weight: bold;
    border-radius: 10px;
    opacity: 0;
    transform: translateY(100%);
    transition: transform 0.3s cubic-bezier(0.22, 1, 0.36, 1), opacity 0.3s cubic-bezier(0.22, 1, 0.36, 1);
    text-shadow: 1px 1px 3px rgba(0,0,0,0.5);
    z-index: 3;
}

/* States when button is 'copied' (keep as is) */
.contact-button.copied .button-content-main {
    transform: translateY(-100%) !important;
    opacity: 0 !important;
}

.contact-button.copied .copied-text {
    transform: translateY(0) !important;
    opacity: 1 !important;
}

.social-links { /* Restore social links styling if needed */
    margin-top: 30px;
}
.social-links a {
    color: var(--text-light);
    margin: 0 20px;
    transition: color 0.3s cubic-bezier(0.22, 1, 0.36, 1), transform 0.3s cubic-bezier(0.22, 1, 0.36, 1);
}
.social-links a:hover {
    color: var(--accent-secondary-sawad);
    transform: scale(1.3);
}

/* --- Reverted "Premium Tools" Section CSS --- */
.tools-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); /* Adjusted minmax for better fit */
    gap: 20px; /* Increased gap for more spacing */
    margin: 60px auto; /* Center the grid */
    max-width: 900px; /* Max width for the grid */
    padding: 0;
    justify-items: stretch;
}

.tool-card {
    background: linear-gradient(145deg, #1c1c1c, #121212); /* Glossy gradient background */
    border-radius: 15px;
    padding: 25px; /* Increased padding */
    display: flex;
    align-items: center;
    gap: 20px; /* Increased gap */
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.4); /* Deeper shadow */
    transition: transform 0.3s ease, box-shadow 0.3s ease; /* Elegant hover transition */
    cursor: pointer;
    will-change: transform, opacity; /* Keep for reveal animation */
    /* Remove opacity/transform for reveal if already handled by reveal-stagger */
}

.tool-card:hover {
    transform: translateY(-6px); /* More pronounced lift */
    box-shadow: 0 15px 35px rgba(0, 0, 0, 0.6); /* Even deeper shadow on hover */
    background: linear-gradient(145deg, #2a2a2a, #1a1a1a); /* Slightly lighter on hover */
}

.tool-icon-wrapper { /* Keep existing styling */
    width: 50px;
    height: 50px;
    background-color: var(--tool-icon-bg);
    border-radius: 10px;
    display: flex;
    justify-content: center;
    align-items: center;
    flex-shrink: 0;
    overflow: hidden;
}

.tool-logo { /* Keep existing styling */
    max-width: 70%;
    max-height: 70%;
    object-fit: contain;
    filter: brightness(0.01);
}

.tool-info { /* Keep existing styling */
    flex-grow: 1;
    text-align: left;
}

.tool-name { /* Keep existing styling */
    font-size: 1.1em;
    font-weight: 600;
    color: var(--tool-name-color);
    margin: 0 0 5px 0;
    line-height: 1.2;
}

.tool-category { /* Keep existing styling */
    font-size: 0.85em;
    color: var(--tool-category-color);
    margin: 0;
    line-height: 1.2;
}

/* Responsive adjustments for tools grid */
@media (max-width: 1200px) {
    .tools-grid {
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        max-width: 600px;
        gap: 15px;
    }
    .tool-card {
        padding: 20px;
        gap: 15px;
    }
}

@media (max-width: 768px) {
    .tools-grid {
        grid-template-columns: 1fr; /* Single column on mobile */
        max-width: 400px;
        gap: 15px;
    }
    .tool-card {
        padding: 18px;
        gap: 12px;
    }
}

@media (max-width: 480px) {
    .tools-grid {
        gap: 10px;
    }
    .tool-card {
        padding: 15px;
        gap: 10px;
    }
}

/* --- Existing Accessibility (Reduced Motion) --- */
@media (prefers-reduced-motion: reduce) {
    /* ... (unchanged) ... */
    /* All .reveal-item, .reveal-parent, .reveal-stagger-container, .tool-card will have animations disabled */
    
    /* Services Section specific overrides for reduced motion */
    #services-pin-wrapper { /* Hide wrapper as pinning is disabled */
        height: auto !important;
        position: relative !important;
    }
    .services-section { /* Ensure it's static and not fixed/centered */
        position: relative !important;
        top: auto !important;
        left: auto !important;
        transform: none !important;
        height: auto !important;
        min-height: auto !important;
        padding: 80px 40px !important; /* Revert to normal section padding */
        pointer-events: auto !important;
        flex-direction: column !important; /* Always stack */
        justify-content: flex-start !important;
        align-items: center !important;
        gap: 20px !important; /* Default stacked gap */
    }
    .services-left-column, .services-right-column {
        flex-basis: auto !important;
        max-width: 100% !important;
        height: auto !important;
        padding-right: 0 !important;
        margin-bottom: 20px !important; /* Space when stacked */
        justify-content: flex-start !important;
        align-items: center !important;
        text-align: center !important;
    }
    .services-heading, .services-description {
        text-align: center !important;
    }

    .cube-container {
        perspective: none !important;
        transform: none !important;
        height: auto !important;
        margin: 0 auto !important;
        position: relative !important;
        top: auto !important;
        overflow: visible !important;
        max-width: 100% !important;
        z-index: auto !important;
    }
    .cube {
        transform-style: flat !important;
        transform: none !important;
        transition: none !important;
        display: flex;
        flex-direction: column;
        gap: 20px;
        height: auto;
    }
    .face {
        transition: none !important;
        opacity: 1 !important;
        visibility: visible !important;
        position: relative !important;
        transform: none !important;
        height: auto !important;
        justify-content: flex-start !important;
        align-items: flex-start !important;
        text-align: left !important;
        padding: 1rem !important; /* Consistent padding */
    }
    .face .service-content {
        align-items: flex-start !important;
        text-align: left !important;
    }
    .face .service-description {
        text-align: left !important;
    }
    .face .face-number {
        position: relative !important;
        bottom: auto !important;
        right: auto !important;
        font-size: 0.8em !important;
        color: var(--text-medium) !important;
        margin-top: 10px;
        align-self: flex-end !important;
    }
}
</style>

### **3. `script.js`**

```javascript
// script.js
// Global constants for animation timing
const ROTATION_INCREMENT_DEG = 45; // Degrees for an 8-sided prism (360 / 8 = 45)
const ANIMATION_DURATION_MS = 1200; // Match CSS transition duration for .cube
const SCROLL_THRESHOLD_PX = 30; // Minimum scroll pixels to trigger a swipe
const SCROLL_DEBOUNCE_TIME_MS = 50; // Prevent rapid-fire wheel events from stacking

// Function to copy text to clipboard for contact buttons
function copyToClipboard(button) {
    const valueElement = button.querySelector('.button-value');
    const value = valueElement ? valueElement.textContent.trim() : ''; // Trim whitespace

    if (value) {
        navigator.clipboard.writeText(value)
            .then(() => {
                button.classList.add('copied');
                setTimeout(() => {
                    button.classList.remove('copied');
                }, 2000); // Reset after 2 seconds
            })
            .catch(err => {
                console.error('Failed to copy: ', err);
                // Fallback for older browsers or if clipboard API fails (e.g., execCommand)
                const textarea = document.createElement('textarea');
                textarea.value = value;
                document.body.appendChild(textarea);
                textarea.select();
                try {
                    document.execCommand('copy');
                    button.classList.add('copied');
                    setTimeout(() => {
                        button.classList.remove('copied');
                    }, 2000);
                } catch (ex) {
                    console.error('Failed to copy using execCommand: ', ex);
                } finally {
                    document.body.removeChild(textarea);
                }
            });
    }
}

// Unified Function to reveal elements on scroll (for 2D animations)
function initIntersectionObserverAnimations() {
  const observerOptions = {
    root: null, // relative to the viewport
    rootMargin: "0px",
    threshold: 0.1 // show when 10% of the element is visible
  };

  const observer = new IntersectionObserver((entries, observer) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        // Check for reduced motion preference
        if (window.matchMedia('(prefers-reduced-motion: reduce)').matches) {
            entry.target.classList.add("visible");
            observer.unobserve(entry.target);
            return;
        }

        // Handle reveal-item (single item reveal like headers, individual cards, 3D cube container)
        if (entry.target.classList.contains("reveal-item")) {
          entry.target.classList.add("visible");
        }
        // Handle reveal-parent (for About section staggered children)
        else if (entry.target.classList.contains("reveal-parent")) {
          // Select ALL direct and indirect .reveal-child elements within this parent
          const childrenToStagger = entry.target.querySelectorAll(".reveal-child"); 
          
          childrenToStagger.forEach((child, index) => {
            setTimeout(() => {
              child.classList.add("visible");
            }, index * 100); // Apply stagger delay (100ms)
          });
        }
        // Handle reveal-stagger-container (for staggered children like Tools and Contact buttons)
        else if (entry.target.classList.contains("reveal-stagger-container")) {
          const children = entry.target.querySelectorAll(".reveal-stagger");
          children.forEach((child, index) => {
            setTimeout(() => {
              child.classList.add("visible");
            }, index * 100); // Apply stagger delay (100ms)
          });
        }
        
        observer.unobserve(entry.target); // Stop observing once revealed
      }
    });
  }, observerOptions);

  // Observe all types of animated containers/items
  document.querySelectorAll(".reveal-item, .reveal-parent, .reveal-stagger-container").forEach(el => observer.observe(el));
}


// Scroll Spy for section title (REMOVED TEXT CHANGE LOGIC)
const sections = document.querySelectorAll("section[id], footer[id]");
const navIndicator = document.querySelector(".left-column-sticky h3"); // Target for your name

window.addEventListener("scroll", () => {
  let current = ""; 
  sections.forEach(section => {
    const sectionTop = section.offsetTop - 150;

    if (window.scrollY >= sectionTop && window.scrollY < sectionTop + section.offsetHeight) {
      current = section.getAttribute("id");
    }
  });
});


// Mouse Follower Glow (implementation)
document.addEventListener('DOMContentLoaded', () => {
    const mouseFollowerGlow = document.querySelector('.mouse-follower-glow');
    if (mouseFollowerGlow) {
        document.addEventListener('mousemove', (event) => {
            mouseFollowerGlow.style.transform = `translate(-50%, -50%) translate3d(${event.clientX}px, ${event.clientY}px, 0)`;
        });
    }

    // Initialize contact button copy functionality
    const contactButtons = document.querySelectorAll('.contact-button');
    contactButtons.forEach(button => {
        button.addEventListener('click', () => copyToClipboard(button));
    });

    // Initialize IntersectionObserver-based animations (for About section, Tools, Contact, and the 3D cube container itself)
    initIntersectionObserverAnimations();

    // --- Services Section 3D Cube Animation (Discrete Step) ---
    const servicesSection = document.getElementById('services');
    const servicesPinWrapper = document.getElementById('services-pin-wrapper'); // The new wrapper div for pinning
    const cubeContainer = document.querySelector('.cube-container');
    const cube = document.getElementById('services-cube');
    
    if (!servicesSection || !servicesPinWrapper || !cubeContainer || !cube) {
        console.error("One or more required elements for Services 3D cube animation not found. Skipping initialization.");
        return; // Exit if elements are missing
    }
    
    const faces = document.querySelectorAll('.face');
    const SERVICES_COUNT = faces.length; // Should be 8.

    let currentRotationAngle = 0; // Tracks the cube's rotation for the active face
    let activeFaceIndex = 0;      // Index of the face currently 'front'
    let isAnimatingCube = false;  // Flag to prevent multiple animations at once
    let isServicesSectionPinned = false; // Flag for pinning state
    
    const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;

    // Calculates the `translateZ` distance for faces to form an 8-sided prism based on height for X-axis rotation
    function calculateFaceOffset() {
        if (!cubeContainer || SERVICES_COUNT === 0) return 0;
        
        const faceHeight = cubeContainer.offsetHeight; // Use height for X-axis rotation
        // R = (H/2) / tan(PI/N) formula for a regular N-sided polygon, where H is the dimension along the rotation plane.
        const calculatedOffset = (faceHeight / 2) / Math.tan(Math.PI / SERVICES_COUNT);
        
        return isNaN(calculatedOffset) || calculatedOffset === 0 ? 300 : calculatedOffset; // Default to 300px if calculation fails
    }

    // Sets up the initial 3D positioning of each face for rotateX
    function setupCubeFaces() {
        if (!cube || SERVICES_COUNT === 0) return;
        const faceOffset = calculateFaceOffset();

        faces.forEach((face, i) => {
            face.style.transition = 'none'; // Clear transitions for setup
            face.style.visibility = 'hidden'; // Hide all initially
            face.style.opacity = 0; // Set opacity to 0

            const angleForFace = i * ROTATION_INCREMENT_DEG;
            // Position faces around the X-axis for a vertical prism
            face.style.transform = `rotateX(${angleForFace}deg) translateZ(${faceOffset}px)`;
        });

        cube.style.transition = 'none'; // No transition for initial cube setup
        cube.style.transform = `rotateX(${-currentRotationAngle}deg)`; // Apply initial cube rotation (dynamic X-axis)
        
        // Initial visibility: only the first face is fully visible
        if (faces[activeFaceIndex]) {
            faces[activeFaceIndex].style.visibility = 'visible';
            faces[activeFaceIndex].style.opacity = 1;
        }
    }

    // Manages opacity and visibility of faces during a 3D transition for rotateX (instant snaps)
    function updateFaceOpacityAndVisibility(progress, prevActiveFaceIndex, newActiveFaceIndex) {
        if (prefersReducedMotion) {
            // In reduced motion, CSS handles the flattened layout and visibility.
            return; 
        }

        faces.forEach((face, i) => {
            face.style.transition = 'none'; // Instant opacity changes
            face.style.visibility = 'hidden'; // Default hidden
            face.style.opacity = 0; // Default transparent
        });

        // Outgoing face snaps to opacity: 0 after 50% progress
        if (faces[prevActiveFaceIndex]) { // The old face
            faces[prevActiveFaceIndex].style.visibility = 'visible';
            if (progress < 0.5) { // Visible until just before 50%
                faces[prevActiveFaceIndex].style.opacity = 1;
            } else { // Instantly hidden at 50% and beyond
                faces[prevActiveFaceIndex].style.opacity = 0;
            }
        }

        // Incoming face snaps to opacity: 1 starting at 50% progress
        if (faces[newActiveFaceIndex]) { // The new face
            faces[newActiveFaceIndex].style.visibility = 'visible';
            if (progress < 0.5) { // Hidden until just before 50%
                faces[newActiveFaceIndex].style.opacity = 0;
            } else { // Instantly visible at 50% and beyond
                faces[newActiveFaceIndex].style.opacity = 1;
            }
        }
    }

    // Animates the cube to the next/previous face using rotateX
    function animateCube(direction) {
        if (isAnimatingCube || prefersReducedMotion) return false;

        let targetActiveFaceIndex = activeFaceIndex + direction;

        // Determine if we hit a boundary that should allow page scroll
        const willHitStartBoundary = activeFaceIndex === 0 && direction === -1;
        const willHitEndBoundary = activeFaceIndex === SERVICES_COUNT - 1 && direction === 1;

        if (willHitStartBoundary || willHitEndBoundary) {
            // Cube animation cannot proceed, signal to unpin/scroll page
            return false; 
        }

        const prevActiveFaceIndex = activeFaceIndex; 
        activeFaceIndex = targetActiveFaceIndex;

        isAnimatingCube = true;

        currentRotationAngle += direction * ROTATION_INCREMENT_DEG;
        cube.style.transition = `transform ${ANIMATION_DURATION_MS}ms cubic-bezier(0.645, 0.045, 0.355, 1)`; // Ensure easing is applied
        cube.style.transform = `rotateX(${-currentRotationAngle}deg)`; 
        
        let startTime = null;
        let animationFrameId;

        function animateFade(currentTime) {
            if (!startTime) startTime = currentTime;
            const elapsed = currentTime - startTime;
            let progress = Math.min(elapsed / ANIMATION_DURATION_MS, 1);

            updateFaceOpacityAndVisibility(progress, prevActiveFaceIndex, activeFaceIndex);

            if (progress < 1) {
                animationFrameId = requestAnimationFrame(animateFade);
            } else {
                isAnimatingCube = false;
                cube.style.transition = 'none'; // Clear transition after animation
                
                faces.forEach((face, i) => {
                    face.style.visibility = 'hidden';
                    face.style.opacity = 0;
                });
                if (faces[activeFaceIndex]) {
                    faces[activeFaceIndex].style.visibility = 'visible';
                    faces[activeFaceIndex].style.opacity = 1;
                    faces[activeFaceIndex].style.transition = 'none';
                }
            }
        }

        animationFrameId = requestAnimationFrame(animateFade);
        return true; // Cube animation started
    }


    // --- Manual Scroll Pinning and Locking for Services Section ---
    const servicesPinObserver = new IntersectionObserver((entries) => {
        if (prefersReducedMotion) return; // Disable pinning/locking for reduced motion

        entries.forEach(entry => {
            const servicesSectionRect = servicesSection.getBoundingClientRect(); // Get rect of the actual section
            const viewportHeight = window.innerHeight;
            
            // Pin when the top of the services section hits near the top of the viewport
            // and the bottom of the services section is still within or below the viewport.
            // This is a robust check for when the section is "active" in the view.
            if (servicesSectionRect.top <= 0 && servicesSectionRect.bottom >= viewportHeight) {
                 if (!isServicesSectionPinned) {
                    servicesSection.classList.add('is-pinned');
                    isServicesSectionPinned = true;
                    document.body.style.overflow = 'hidden'; // Lock page scroll
                }
            } else {
                // Unpin logic: if section is pinned and it's no longer fully visible (or scrolling past its wrapper)
                if (isServicesSectionPinned) {
                    servicesSection.classList.remove('is-pinned');
                    isServicesSectionPinned = false;
                    document.body.style.overflow = 'auto'; // Unlock page scroll
                }
            }
        });
    }, {
        root: null, // viewport
        rootMargin: '0px',
        threshold: [0, 0.01, 0.99, 1] // Observe when entering, leaving, and fully visible
    });

    servicesPinObserver.observe(servicesPinWrapper);

    // --- Manual Wheel/Touch Event Handlers for Cube Rotation & Page Scroll ---
    let lastWheelTime = 0; 
    let lastTouchY = 0;

    const handleScrollEvent = (event) => {
        if (prefersReducedMotion) return;

        // If the services section is pinned, prevent default page scroll and handle cube rotation
        if (isServicesSectionPinned) {
            event.preventDefault(); 
            
            const now = Date.now();
            if (now - lastWheelTime < SCROLL_DEBOUNCE_TIME_MS) {
                return; // Debounce rapid wheel events
            }
            lastWheelTime = now;

            const direction = event.deltaY > 0 ? 1 : -1; // 1 for scroll down, -1 for scroll up
            const didAnimate = animateCube(direction);

            if (!didAnimate) {
                // If animateCube returns false (hit boundary 01 or 08),
                // it means the cube cannot rotate further. Unpin the section
                // to allow the user to scroll to the next/previous section.
                servicesSection.classList.remove('is-pinned');
                isServicesSectionPinned = false;
                document.body.style.overflow = 'auto'; 

                // Attempt to initiate page scroll slightly after unpinning
                // This makes the transition feel more natural.
                window.scrollBy({ top: direction * 50, behavior: 'smooth' }); 
            }
        }
    };

    const handleTouchStart = (e) => {
        if (prefersReducedMotion || !isServicesSectionPinned) return;
        lastTouchY = e.touches[0].clientY;
        // Don't prevent default here to allow native scroll if not pinned
    };

    const handleTouchMove = (e) => {
        if (prefersReducedMotion || !isServicesSectionPinned || isAnimatingCube) return;

        const currentTouchY = e.touches[0].clientY;
        const touchDelta = lastTouchY - currentTouchY; // Positive for swipe up, negative for swipe down

        if (Math.abs(touchDelta) > SCROLL_THRESHOLD_PX) {
            e.preventDefault(); // Prevent page scroll if significant swipe
            const direction = touchDelta > 0 ? 1 : -1; // Swipe up (delta > 0) is scroll down (dir 1)
            const didAnimate = animateCube(direction);
            
            if (!didAnimate) {
                // Unpin if at boundary
                servicesSection.classList.remove('is-pinned');
                isServicesSectionPinned = false;
                document.body.style.overflow = 'auto';
                window.scrollBy({ top: direction * 50, behavior: 'smooth' }); 
            }
            lastTouchY = currentTouchY; // Reset for next move detection
        }
    };

    window.addEventListener('wheel', handleScrollEvent, { passive: false });
    // Use the #services-pin-wrapper for touch events to ensure event listener is active over the entire scroll area
    servicesPinWrapper.addEventListener('touchstart', handleTouchStart, { passive: false });
    servicesPinWrapper.addEventListener('touchmove', handleTouchMove, { passive: false });


    // Initial setup and resize handling
    const initializeServices = () => {
        setupCubeFaces(); 

        if (prefersReducedMotion) {
            servicesSection.classList.remove('is-pinned');
            document.body.style.overflow = 'auto';
            faces.forEach(face => {
                face.style.transition = 'none';
                face.style.opacity = 1;
                face.style.visibility = 'visible';
            });
            cube.style.transform = 'none';
            if (cubeContainer) {
                cubeContainer.style.position = 'relative'; // Revert cube-container sticky/transform
                cubeContainer.style.top = 'auto';
                cubeContainer.style.transform = 'none';
            }
            servicesPinObserver.unobserve(servicesPinWrapper); // Stop observing
        } else {
            // Ensure section is not pinned initially and body is scrollable
            servicesSection.classList.remove('is-pinned');
            document.body.style.overflow = 'auto';
            // Start observing the pin wrapper if not already
            servicesPinObserver.observe(servicesPinWrapper);
        }
    };

    window.addEventListener('resize', initializeServices);
    initializeServices(); // Call on initial load

    // Trigger a scroll event immediately to ensure initial IntersectionObserver checks
    window.dispatchEvent(new Event('scroll'));
});
</script>
